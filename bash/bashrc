# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# No locking on Ctrl-S
stty -ixon

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize


##
## history: http://mywiki.wooledge.org/BashFAQ/088
##

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# Big history
HISTFILESIZE=10000
HISTSIZE=10000

# histappend which causes all new history lines to be appended, and ensures
# that multiple logins do not overwrite each other's history
shopt -s histappend

##
## completion
##

bind '"\t":menu-complete'

# Copied over from the default Ubuntu config
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

if [ -d ~/.nix-profile/etc/bash_completion.d ]; then
  for bcfile in ~/.nix-profile/etc/bash_completion.d/* ; do
    . $bcfile
  done
fi

if [ -d ~/.nix-profile/share/bash-completion/completions ]; then
  for bcfile in ~/.nix-profile/share/bash-completion/completions/* ; do
    . $bcfile
  done
fi

##
## Aliases
##

alias ..="cd ..";
alias ls="exa -F --group-directories-first --color=never"
alias ll="exa -lFBgm --group-directories-first --color=never"
alias la="ll -a";
alias wd="j";
alias :e="vim"

alias xo="xdg-open"
alias tmp='cd $(mktemp -d)'

alias gti="git"
alias gd="git diff"
alias git-delete-merged="git branch --merged | egrep -v '(^\*|master|dev)' | xargs git branch -d"

function t {
    if [ -n "$1" ]; then
        cd "$1"
    fi
    tmux -2 new-session \; split-window -h \; attach
}

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi


##
## prompt
##

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

PROMPT_COMMAND=__prompt_command

__prompt_command() {
    local Exit="$?"
    PS1=""

    local RCol='\[\e[0m\]'

    local UBlu='\[\e[0;4;34m\]'
    local Gre='\[\e[1;32m\]'
    local Red='\[\e[0;31m\]'

    PS1+="\u@\h ${UBlu}\w${RCol}${Gre}$(parse_git_branch)${RCol}\n"

    if [ $Exit != 0 ]; then
        PS1+="${Red}[${Exit}] "
    fi

    PS1+="${RCol}\$ "

    history -a
}

##
## fzf
##

# FIXME(timaa2k): implicit dependency fzf-share
if command -v fzf-share >/dev/null; then
  source "$(fzf-share)/completion.bash"
fi

if command -v fzf-share >/dev/null; then
  source "$(fzf-share)/key-bindings.bash"
fi


export FZF_DEFAULT_COMMAND="fd --type file"
export FZF_DEFAULT_OPTS="--height 40% --inline-info --ansi"

vf() {
  fd --type file --max-depth 6 | fzf --margin=10% --height=100% --preview-window right:70% --preview 'bat --color=always --theme=GitHub {}'
}

wd() {
  local dir
  dir=$(fd . "${1:-$HOME}" --type directory --max-depth 5 | fzf-down --ansi --multi --tac) && cd "$dir"
}

fif() {
  if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
  rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

cdf() {
  local file
  local dir
  file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
  fzf --height 50% "$@" --border
}

gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}

gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {} | head -'$LINES
}

gh() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -'$LINES |
  grep -o "[a-f0-9]\{7,\}"
}

gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
  cut -d$'\t' -f1
}
