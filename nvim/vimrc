" ============================================================================ "
" ===                           GENERAL SETTINGS                           === "
" ============================================================================ "

set mouse=a
set wrapscan
set smartcase

set splitbelow
set splitright

set termguicolors

filetype plugin indent on
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab

set incsearch smartcase hlsearch
set nolist
set wrap breakindent
set encoding=utf-8

set title
set number
":set number relativenumber
":augroup numbertoggle
":  autocmd!
":  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
":  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
":augroup END
set cursorline
set ruler showcmd showmode


" Disable .swp already exists warning
set shortmess+=A

syntax on

" Required by Coc-nvim

" TextEdit might fail if hidden is not set.
" Downsides removed by Wintabs
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give normal space for displaying messages.
set cmdheight=1

" Empty echo area after entered command.
autocmd CmdlineLeave * echo ''

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes


" ============================================================================ "
" ===                           AIRLINE SETTINGS                           === "
" ============================================================================ "

set showtabline=2
set laststatus=2
set noshowmode

" Lower waiting time when quitting INSERT mode.
set ttimeout
set ttimeoutlen=100
set timeoutlen=3000

let g:airline_detect_modified=1
let g:airline_detect_paste=1
let g:airline_theme='dark'
let g:airline_exclude_preview = 1
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline_statusline_ontop = 1
let g:airline_highlighting_cache = 1

let g:airline_section_y = '%2p%%'
let g:airline_section_z = '%l : %c'

let g:airline_symbols = {
  \ 'branch': '',
\ }

let g:airline#extensions#disable_rtp_load = v:true
let g:airline_extensions = [
  \ 'branch',
  \ 'coc',
  \ 'tmuxline',
\ ]

let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#branch#empty_message = ''
" to only show the tail, e.g. a branch 'feature/foo' becomes 'foo', use
let g:airline#extensions#branch#format = 1

let g:airline#extensions#coc#enabled = 1
let g:airline#extensions#tmuxline#enabled = 1
let g:airline#extensions#tmuxline#snapshot_file = "~/.tmux-colors"

let g:tmuxline_powerline_separators = 0
let g:tmuxline_status_justify = 'left'
let g:tmuxline_preset = {
    \'a'       : '',
    \'b'       : '',
    \'c'       : '',
    \'win'     : '#W',
    \'cwin'    : '#W',
    \'x'       : '#S',
    \'y'       : '%Y-%m-%d',
    \'z'       : '',
    \'options' : {'status-justify' : 'left'}}

let g:airline#extensions#default#section_truncate_width = {
  \ 'b': 79,
  \ 'x': 60,
  \ 'y': 88,
  \ 'z': 45,
  \ 'warning': 80,
  \ 'error': 80,
  \ }

let g:airline#extensions#default#layout = [
  \ [ 'a', 'b', 'error', 'warning', 'c' ],
  \ [ 'x', 'y', 'z',]
  \ ]


" ============================================================================ "
" ===                     FILETYPE SPECIFIC SETTINGS                       === "
" ============================================================================ "

" Hack to ensure vim-wintabs is loaded after the lightline-vim plugin.
autocmd VimEnter * packadd vim-wintabs

" Golang
autocmd Filetype go setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd BufWritePre *.go :silent !call CocActionAsync('runCommand', 'editor.action.organizeImport')

" Markdown
au FileType markdown setlocal spell

" Python
autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4


" ============================================================================ "
" ===                        Coc-nvim PLUGIN CONFIG                        === "
" ============================================================================ "
"
let g:coc_user_config = {
    \ 'codeLens.enable': 'true',
    \ 'coc.preferences.formatOnType': 'true',
    \ 'coc.preferences.formatOnSaveFiletypes': [
        \ 'go',
        \ 'python',
        \ 'markdown',
        \ 'javascript',
        \ 'typescript',
        \ 'json',
        \ 'jsonc'
    \ ],
    \ 'coc.preferences.messageLevel': 'error',
    \ 'coc.preferences.extensionUpdateCheck': 'daily',
    \ 'coc.source.around.firstMatch': 'false',
    \ 'coc.source.file.ignoreHidden': 'false',
    \ 'diagnostic.format': '%message [%source]',
    \ 'diagnostic.virtualText': 'true',
    \ 'diagnostic.checkCurrentLine': 'true',
    \ 'diagnostic.separateRelatedInformationAsDiagnostics': 'true',
    \ 'eslint.autoFixOnSave': 'true',
    \ 'eslint.format.enable': 'true',
    \ 'git.addGBlameToVirtualText': 'true',
    \ 'git.semanticCommit.scope': 'false',
    \ 'go.goplsOptions': {
        \ 'linksInHover': 'false',
        \ 'usePlaceholders': 'true',
        \ 'staticcheck': 'true'
    \ },
    \ 'markdownlint.config': {
        \ 'default': 'true',
        \ 'line-length': 'false'
    \ },
    \ 'languageserver': {
        \ 'go': {
            \ 'command': 'gopls',
            \ 'rootPatterns': ['go.mod'],
            \ 'filetypes': ['go']
        \ }
    \ }
\ }
"
" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call CocAction('fold', <f-args>)

" Add `:Imports` command for organize imports of the current buffer.
command! -nargs=0 Imports :call CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" TODO(tim): Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
"set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped.
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end


" ============================================================================ "
" ===                         Echodoc PLUGIN CONFIG                        === "
" ============================================================================ "

" Display function signatures in echo area
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'signature'


" ============================================================================ "
" ===                         NERDTree PLUGIN CONFIG                       === "
" ============================================================================ "

" Always show NERDTree to the left.
let g:NERDTreeWinPos = "left"

" Delete the buffer when deleting a file via NERDTree.
let NERDTreeAutoDeleteBuffer = 1

" Preffify NERDTree.
let NERDTreeMinimalUI = 1
"let NERDTreeDirArrows = 1

" Start NERDTree if vim is invoked without cmd line args.
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists(“s:std_in”) | NERDTree | endif
"
" Automatically close tab if the only remaining one is NERDTree.
"autocmd bufenter * if (winnr(“$”) == 1 && exists(“b:NERDTreeType”) && b:NERDTreeType == “primary”) | q | endif
"
" Automatically close NERDTree after opening a file.
let NERDTreeQuitOnOpen = 1


" ============================================================================ "
" ===                        WinTabs PLUGIN CONFIG                         === "
" ============================================================================ "

let g:wintabs_display = 'statusline'
let g:wintabs_autoclose = 1
let g:wintabs_autoclose_vim = 1
let g:wintabs_autoclose_vimtab = 1
let g:wintabs_switchbuf = ''
let g:wintabs_ui_modified = '+'
let g:wintabs_ui_readonly = '-'
let g:wintabs_ui_sep_leftmost = ''
let g:wintabs_ui_sep_inbetween = ''
let g:wintabs_ui_sep_rightmost = ''
let g:wintabs_ui_active_higroup = 'Search'


" ============================================================================ "
" ===                             KEY MAPPINGS                             === "
" ============================================================================ "

" === General Shorcuts === "

" Change leader key from "\" to ","
let mapleader=","

" Improved navigation
"nnoremap <silent> <C-h> :TmuxNavigateLeft<CR>
"nnoremap <silent> <C-j> :TmuxNavigateDown<CR>
"nnoremap <silent> <C-k> :TmuxNavigateUp<CR>
"nnoremap <silent> <C-l> :TmuxNavigateRight<CR>

"tnoremap <C-w>h <C-\><C-n><C-w>h
"tnoremap <C-w>j <C-\><C-n><C-w>j
"tnoremap <C-w>k <C-\><C-n><C-w>k
"tnoremap <C-w>l <C-\><C-n><C-w>l


" === Fzf Shortcuts === "

nnoremap <silent> <C-f> :Files<CR>
nnoremap <silent> <C-b> :Buffers<CR>
nnoremap <silent> <C-v> :Git<CR>

" === WinTab Shortcuts === "

nnoremap <silent> <S-Tab> :WintabsPrevious<CR>
nnoremap <silent> <Tab> :WintabsNext<CR>
nnoremap <silent> <C-x> :WintabsClose<CR>
nnoremap <silent> <C-z> :WintabsUndo<CR>
command! Tclose WintabsClose
command! Tnext WintabsNext
command! Tprev WintabsPrevious
command! Tmax WintabsMaximize
command! Tundo WintabsUndo

" === NERDTree Shortcuts === "

nnoremap <silent> <C-T> :NERDTreeToggle<CR>
nnoremap <silent> <C-t> :NERDTreeFind<CR>


" === Coc-nvim Shorcuts === "

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
"nmap <silent> <TAB> <Plug>(coc-range-select)
"xmap <silent> <TAB> <Plug>(coc-range-select)


" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>


" ============================================================================ "
" ===                              COLORSCHEME                             === "
" ============================================================================ "

" Author: Tim Weidner <timaa2k@gmail.com>
" Maintainer: Tim Weidner <timaa2k@gmail.com>
" License: MIT
" Thanks to @ggalindezb for the template.

highlight clear

set background=light

if exists("syntax_on")
  syntax reset
endif

"let g:colors_name="timeless-grey"

" bg      = #e1e1e1

" black   = #404040
" red     = #a05454
" green   = #4fa23b
" yellow  = #7e9904
" blue    = #5f819d
" magenta = #71577a
" cyan    = #55807b
" white   = #bcbcbc
"
" black   = #8f8f8f
" red     = #cc6666
" green   = #b5bd90
" yellow  = #d8af5f
" blue    = #81a2be
" magenta = #2eb5c1
" cyan    = #8abeb7
" white   = #cccccc

"----------------------------------------------------------------
" General settings                                              |
"----------------------------------------------------------------

" --------------------------------
" Editor settings
" --------------------------------
hi          Normal guifg=#5c5c5c guibg=#e1e1e1 gui=none
hi          Cursor guifg=#e1e1e1 guibg=#5c5c5c gui=none
hi      CursorLine               guibg=#d9d9d9 gui=none
hi          LineNr guifg=#bcbcbc guibg=#e1e1e1 gui=none
hi    CursorLineNR guifg=#5c5c5c guibg=#d9d9d9 gui=none
hi     EndOfBuffer guifg=#e1e1e1 guibg=none    gui=none

" -----------------
" - Number column -
" -----------------
hi    CursorColumn guifg=none    guibg=#d9d9d9 gui=none
hi      FoldColumn guifg=#2eb5c1 guibg=none    gui=none
hi      SignColumn guifg=#2eb5c1 guibg=none    gui=none
hi          Folded guifg=none    guibg=none    gui=none

" -------------------------
" - Window/Tab delimiters - 
" -------------------------
hi       VertSplit guifg=#d9d9d9 guibg=none    gui=bold
hi     ColorColumn guifg=none    guibg=#d9d9d9 gui=none
hi         TabLine guifg=#2eb5c1 guibg=#d9d9d9 gui=none
hi     TabLineFill guifg=#2eb5c1 guibg=#d9d9d9 gui=none
hi      TabLineSel guifg=none    guibg=#d9d9d9 gui=none

" -------------------------------
" - File Navigation / Searching -
" -------------------------------
hi       Directory guifg=none    guibg=none    gui=underline
hi          Search guifg=#e1e1e1 guibg=#2eb5c1 gui=none
hi       IncSearch guifg=#e1e1e1 guibg=#2eb5c1 gui=none

" -----------------
" - Prompt/Status -
" -----------------
hi      StatusLine guifg=#2eb5c1 guibg=#bcbcbc gui=none
hi    StatusLineNC guifg=#2eb5c1 guibg=none    gui=none
hi        WildMenu guifg=#2eb5c1 guibg=none    gui=none
hi        Question guifg=#b5bd90 guibg=none    gui=none
hi           Title guifg=none    guibg=none    gui=none
hi         ModeMsg guifg=none    guibg=none    gui=none
hi         MoreMsg guifg=none    guibg=none    gui=none

" --------------
" - Visual aid -
" --------------
hi      MatchParen guifg=none    guibg=#bcbcbc gui=none
hi          Visual guifg=#5c5c5c guibg=#cccccc gui=none
hi       VisualNOS guifg=#5c5c5c guibg=#cccccc gui=none
hi         NonText guifg=#d9d9d9 guibg=none    gui=none
hi            Todo guifg=#d8af5f guibg=none    gui=none
hi      Underlined guifg=none    guibg=none    gui=underline
hi           Error guifg=#e1e1e1 guibg=#cc6666 gui=none
hi        ErrorMsg guifg=#e1e1e1 guibg=#cc6666 gui=none
hi      WarningMsg guifg=#e1e1e1 guibg=#d8af5f gui=none
hi          Ignore guifg=#e1e1e1 guibg=none    gui=none
hi         Conceal guifg=#8abeb7 guibg=none    gui=none
hi      SpecialKey guifg=#8abeb7 guibg=none    gui=none

" --------------------------------
" Variable types
" --------------------------------
hi        Constant guifg=#cc6666 guibg=none    gui=none
hi          String guifg=#de935f guibg=none    gui=none
hi StringDelimiter guifg=#2eb5c1 guibg=none    gui=none
hi       Character guifg=none    guibg=none    gui=none
hi          Number guifg=none    guibg=none    gui=none
hi         Boolean guifg=#5f819d guibg=none    gui=none
hi           Float guifg=#cc6666 guibg=none    gui=none

hi      Identifier guifg=#5f819d guibg=none    gui=none
hi        Function guifg=#8abeb7 guibg=none    gui=none

" --------------------------------
" Language constructs
" --------------------------------
hi         Comment guifg=#8f8f8f guibg=none    gui=none

hi       Statement guifg=#8abeb7 guibg=none    gui=none
hi     Conditional guifg=#5f819d guibg=none    gui=none
hi          Repeat guifg=#5f819d guibg=none    gui=none
hi           Label guifg=#5f819d guibg=none    gui=none
hi        Operator guifg=#5f819d guibg=none    gui=none
hi         Keyword guifg=#5f819d guibg=none    gui=none
hi       Exception guifg=#cc6666 guibg=none    gui=none

hi         Special guifg=#bcbcbc guibg=none    gui=none
hi     SpecialChar guifg=#8abeb7 guibg=none    gui=none
hi             Tag guifg=#8abeb7 guibg=none    gui=none
hi       Delimiter guifg=#2eb5c1 guibg=none    gui=none
hi  SpecialComment guifg=#8abeb7 guibg=none    gui=none
hi           Debug guifg=#8abeb7 guibg=none    gui=none

" ----------
" - C like -
" ----------
hi         PreProc guifg=#2eb5c1 guibg=none    gui=none
hi         Include guifg=#2eb5c1 guibg=none    gui=none
hi          Define guifg=#2eb5c1 guibg=none    gui=none
hi           Macro guifg=#2eb5c1 guibg=none    gui=none
hi       PreCondit guifg=#2eb5c1 guibg=none    gui=none

hi            Type guifg=#2eb5c1 guibg=none    gui=none
hi    StorageClass guifg=#2eb5c1 guibg=none    gui=none
hi       Structure guifg=#2eb5c1 guibg=none    gui=none
hi         Typedef guifg=#2eb5c1 guibg=none    gui=none

" --------------------------------
" Diff
" --------------------------------
hi         DiffAdd guifg=#b5bd90 guibg=none gui=none
hi      DiffChange guifg=#d8af5f guibg=none gui=none
hi      DiffDelete guifg=#cc6666 guibg=none gui=none
hi        DiffText guifg=#d8af5f guibg=none gui=none
hi        DiffFile guifg=none    guibg=none    gui=underline


" --------------------------------
" Completion menu
" --------------------------------
hi           Pmenu guifg=#2eb5c1 guibg=#d9d9d9 gui=none
hi        PmenuSel guifg=none    guibg=#d9d9d9 gui=none
hi       PmenuSbar guifg=#2eb5c1 guibg=#d9d9d9 gui=none
hi      PmenuThumb guifg=#2eb5c1 guibg=#d9d9d9 gui=none

" --------------------------------
" Spelling
" --------------------------------
hi        SpellBad guifg=#cc6666 guibg=none    gui=underline
hi        SpellCap guifg=#d8af5f guibg=none    gui=underline
hi      SpellLocal guifg=#d8af5f guibg=none    gui=underline
hi       SpellRare guifg=#d8af5f guibg=none    gui=underline

"--------------------------------------------------------------------
" Specific settings                                                 |
"--------------------------------------------------------------------

hi  link diffAdded               DiffAdd
hi  link diffRemoved             DiffDelete
hi  link diffLine                DiffFile
hi  link diffIndexLine           DiffFile
hi  link diffSubName             DiffFile

hi! link gitDateHeader           gitIdentityHeader
hi! link gitIdentityHeader       gitIdentityKeyword
hi! link gitIdentityKeyword      Label
hi! link gitNotesHeader          gitKeyword
hi! link gitReflogHeader         gitKeyword
hi! link gitKeyword              Keyword
hi! link gitIdentity             String
hi! link gitEmailDelimiter       Delimiter
hi! link gitEmail                Special
hi! link gitDate                 Number
hi! link gitMode                 Number
hi! link gitHashAbbrev           gitHash
hi! link gitHash                 Identifier
hi! link gitReflogMiddle         gitReference
hi! link gitReference            Function
hi! link gitStage                gitType
hi! link gitType                 Type
hi! link gitDiffAdded            diffAdded
hi! link gitDiffRemoved          diffRemoved
hi! link gitcommitDiscardedFile  diffRemoved
hi! link gitcommitSelectedFile   diffAdded
hi! link gitcommitUnmergedFile   ErrorMsg
hi! link gitcommitDiscardedArrow gitcommitDiscardedFile
hi! link gitcommitSelectedArrow  gitcommitSelectedFile
hi! link gitcommitUnmergedArrow  gitcommitUnmergedFile

let g:terminal_color_background = "#e1e1e1"
let g:terminal_color_foreground = "#5c5c5c"

" dark0 + gray
let g:terminal_color_0 = "#404040"
let g:terminal_color_8 = "#8f8f8f"

" neutral_red + bright_red
let g:terminal_color_1 = "#a05454"
let g:terminal_color_9 = "#cc6666"

" neutral_green + bright_green
let g:terminal_color_2 = "#4fa23b"
let g:terminal_color_10 = "#b5bd90"

" neutral_yellow + bright_yellow
let g:terminal_color_3 = "#2eb5c1"
let g:terminal_color_11 = "#d8af5f"

" neutral_blue + bright_blue
let g:terminal_color_4 = "#5f819d"
let g:terminal_color_12 = "#81a2be"

" neutral_purple + bright_purple
let g:terminal_color_5 = "#71577a"
let g:terminal_color_13 = "#2eb5c1"

" neutral_aqua + faded_aqua
let g:terminal_color_6 = "#55807b"
let g:terminal_color_14 = "#8abeb7"

" light4 + light1
let g:terminal_color_7 = "#bcbcbc"
let g:terminal_color_15 = "#cccccc"


let g:airline_theme = 'base16'
